<div class="slide-deck">
  <title-slide
    @current={{current}}
    @deckMeta={{deckMeta}}
  />

  <content-slide @title="About me" @current={{current}} @deckMeta={{deckMeta}}>
    <ul>
      <li>Retail 1 team</li>
      <li>Background is full-stack</li>
      <li>Pure front-end since working at Q2 and love it</li>
      <li>Been pretty involved helping to build out Glimmer (not the Glimmer VM though)</li>
      <li>Author of the {{inline-code "@glimmer/web-component"}} package</li>
    </ul>
    <p><img src="/forest-park.jpg" width="30%" /></p>
  </content-slide>

  <content-slide @title="What even is Glimmer?" @current={{current}} @deckMeta={{deckMeta}}>
    <ul>
      <li>A new javascript component library</li>
      <li>Extracted from Ember's rendering layer</li>
    </ul>
  </content-slide>

  <content-slide @title="Why I'm super excited about Glimmer" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>Very fast initial render</h3>
    <ul>
      <li>Faster than React and Preact (with static content thrown in the mix)</li>
    </ul>
    <h3>Very, very fast re-render</h3>
    <ul>
      <li>Faster than React, Preact, and Inferno</li>
    </ul>
    <h3>Uses a novel approach to accomplish this performance</h3>
    <ul>
      <li>Precompiles templates into bytecode, leading to super small asset sizes</li>
      <li>Uses the "appending" Glimmer VM to build the DOM out of the opcodes</li>
      <li>Uses the "updating" Glimmer VM to selectively update the DOM, all without diffing</li>
    </ul>
    <h3>A basic Glimmer app is only 30kb gzipped</h3>
    <h3>Written in TypeScript</h3>
  </content-slide>
  
  <content-slide @title="To give you an idea of just how fast it is" @current={{current}} @deckMeta={{deckMeta}}>
    <p>
      <img src="http://yehudakatz.com/content/images/2017/04/realistic-update.png" width="70%" />
    </p>
    <p>Source: <a href="http://yehudakatz.com/2017/04/05/the-glimmer-vm-boots-fast-and-stays-fast/">The Glimmer VM: Boots Fast and Stays Fast</a></p>
  </content-slide>

  <content-slide @title="Get set up" @current={{current}} @deckMeta={{deckMeta}}>
    <p>We need the ember-cli canary channel for the next step. This is how we get it:</p>
    <code-snippet class="language-x">
      $ yarn global add ember-cli/ember-cli
    </code-snippet>
    <p>Then to make sure there isn't some global tomfoolery going on:</p>
    <code-snippet class="language-x">
      $ ember version
      ember-cli: 2.13.0-beta.3
    </code-snippet>
  </content-slide>

  <content-slide @title="Create the project" @current={{current}} @deckMeta={{deckMeta}}>
    <code-snippet class="language-x">
      $ ember new slide-deck -b @glimmer/blueprint
      $ cd slide-deck
    </code-snippet>
  </content-slide>

  <content-slide @title="Start it up" @current={{current}} @deckMeta={{deckMeta}}>
    <code-snippet class="language-x">
      $ ember serve
    </code-snippet>
    <p>When you open up <a href="http://localhost:4200/">http://localhost:4200/</a> you should see:</p>
    <blockquote>
      <h1>Welcome to Glimmer!</h1>
    </blockquote>
  </content-slide>

  <content-slide @title="About the app's entry point" @current={{current}} @deckMeta={{deckMeta}}>
    <p>Our app is actually just a component tree that starts with a root component. A root component is just like any other component, but it is rendered like this:</p>
    <h3>{{inline-code "src/index.ts"}}</h3>
    <code-snippet class="language-typescript">
      const app = new App();
      const containerElement = document.getElementById('app');

      app.renderComponent('slide-deck', containerElement, null);
    </code-snippet>
    <p>At this time you cannot pass args into the root component. Initial state must come from inside the root component. We are working on changing that.</p>
  </content-slide>

  <content-slide @title="About the directory structure" @current={{current}} @deckMeta={{deckMeta}}>
    <p>This is the new <a href="https://github.com/emberjs/rfcs/blob/master/text/0143-module-unification.md">module unification</a> directory structure as it looks with our basic Glimmer app:</p>
    <code-snippet class="language-x">
      src
      ├── index.ts
      ├── main.ts
      └── ui
          ├── components
          │   ├── slide-deck
          │   │   ├── component.ts
          │   │   └── template.hbs
          ├── index.html
          └── styles
              └── app.scss
    </code-snippet>
  </content-slide>

  <content-slide @title="Give our app some data" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>{{inline-code "src/ui/components/slide-deck/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      export default class SlideDeck extends Component {
        get deckMeta(): object {
          return {
            title: 'Making a slide deck with Glimmer',
            author: 'Robbie Pitts',
            twitter: '@_robbiepitts',
            github: '@robbiepitts'
          };
        }
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="Render that data" @current={{current}} @deckMeta={{deckMeta}}>
    <p>First some notes about Glimmer templates:</p>
    <ul>
      <li>They are outer-html, opposed to Ember's inner-html templates</li>
      <li>They must have a single top-level element</li>
      <li>You should be able to do {{inline-code "<component-name>"}} as the top-level element but can't; it's a bug</li>
    </ul>
  </content-slide>

  <content-slide @title="Render that data" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>{{inline-code "src/ui/components/slide-deck/template.hbs"}}</h3>
    <code-snippet class="language-handlebars">{{escape-markup "
      <div class=\"slide-deck\">
        <title-slide @deckMeta={{deckMeta}} />
      </div>
    "}}</code-snippet>
  </content-slide>

  <content-slide @title="Render that data" @current={{current}} @deckMeta={{deckMeta}}>
    <p>Let's make the {{inline-code "<title-slide />"}} component:</p>
    <code-snippet class="language-x">
      $ ember g glimmer-component title-slide
    </code-snippet>
  </content-slide>

  <content-slide @title="Render that data" @current={{current}} @deckMeta={{deckMeta}}>
    <p>What we're trying to implement:</p>
    <code-snippet class="language-handlebars">{{escape-markup "
      <title-slide @deckMeta={{deckMeta}} />
    "}}</code-snippet>
    <h3>{{inline-code "src/ui/components/title-slide/template.hbs"}}</h3>
    <code-snippet class="language-handlebars">{{escape-markup "
      <div class=\"slide title-slide\">
        <h1>{{@deckMeta.title}}</h1>
        <h2>{{@deckMeta.author}}</h2>
        <h2>twitter: {{@deckMeta.twitter}}</h2>
        <h2>github: {{@deckMeta.github}}</h2>
      </div>
    "}}</code-snippet>
  </content-slide>

  <content-slide @title="Add a slide" @current={{current}} @deckMeta={{deckMeta}}>
    <p>Let's add our yet-to-be-created component to our main, slide deck template.</p>
    <h3>{{inline-code "src/ui/components/slide-deck/template.hbs"}}</h3>
    <code-snippet class="language-handlebars">{{escape-markup "
      <div class=\"slide-deck\">
        <title-slide @deckMeta={{deckMeta}} />
        <content-slide @title=\"First slide\" @deckMeta={{deckMeta}}>
          <p>Cool slide, bro.</p>
        </content-slide>
      </div>
    "}}</code-snippet>
  </content-slide>

  <content-slide @title="Generate our content-slide component" @current={{current}} @deckMeta={{deckMeta}}>
    <p>And then we do this again for our next component:</p>
    <code-snippet class="language-x">
      $ ember g glimmer-component content-slide
    </code-snippet>
  </content-slide>

  <content-slide @title="Fill in the content-slide template" @current={{current}} @deckMeta={{deckMeta}}>
    <p>What we're trying to implement:</p>
    <code-snippet class="language-handlebars">{{escape-markup "
      <content-slide @title=\"First slide\" @deckMeta={{deckMeta}}>
        <p>Cool slide, bro.</p>
      </content-slide>
    "}}</code-snippet>
    <h3>{{inline-code "src/ui/components/content-slide/template.hbs"}}</h3>
    <code-snippet class="language-handlebars">{{escape-markup "
      <div class=\"slide content-slide\">
        <header><p>{{headerText}}</p></header>
        <article>
          <h1>{{@title}}</h1>
          {{yield}}
        </article>
      </div>
    "}}</code-snippet>
  </content-slide>

  <content-slide @title="Make our headerText property" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>{{inline-code "src/ui/components/content-slide/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import Component, { tracked } from '@glimmer/component';

      export default class ContentSlide extends Component {
        args: {
          title: string,
          deckMeta: {
            title: string,
            author: string,
            twitter: string,
            github: string
          }
        }

        get headerText() {
          let { title, author, twitter, github } = this.args.deckMeta;
          return `${title} / ${author} / twitter: ${twitter} / github: ${github}`;
        }
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="This object looks familiar" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>{{inline-code "src/ui/components/slide-deck/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import Component, { tracked } from '@glimmer/component';

      export default class SlideDeck extends Component {
        get deckMeta(): object {
          return {
            title: 'Making a slide deck with Glimmer',
            author: 'Robbie Pitts',
            twitter: '@_robbiepitts',
            github: '@robbiepitts'
          };
        }
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="Give our object shape a name" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>{{inline-code "src/utils/deck-meta.ts"}}</h3>
    <code-snippet class="language-typescript">
      interface DeckMeta {
        title: string,
        author: string,
        twitter: string,
        github: string
      };

      export default DeckMeta;
    </code-snippet>
  </content-slide>

  <content-slide @title="Give our object shape a name" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>{{inline-code "src/ui/components/slide-deck/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import Component, { tracked } from '@glimmer/component';
      import DeckMeta from '../../utils/deck-meta';

      export default class SlideDeck extends Component {
        get deckMeta(): DeckMeta {
          return {
            title: 'Making a slide deck with Glimmer',
            author: 'Robbie Pitts',
            twitter: '@_robbiepitts',
            github: '@robbiepitts'
          };
        }
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="Give our object shape a name" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>{{inline-code "src/ui/components/content-slide/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import Component, { tracked } from '@glimmer/component';
      import DeckMeta from '../../utils/deck-meta';

      export default class ContentSlide extends Component {
        args: {
          title: string,
          deckMeta: DeckMeta
        }

        get headerText() {
          let { title, author, twitter, github } = this.args.deckMeta;
          return `${title} / ${author} / twitter: ${twitter} / github: ${github}`;
        }
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="Now to show only one slide at a time" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>{{inline-code "src/ui/components/slide-deck/template.hbs"}}</h3>
    <code-snippet class="language-handlebars">{{escape-markup "
      <div class=\"slide-deck\">
        <title-slide @current={{current}} @deckMeta={{deckMeta}} />
        <content-slide @title=\"First slide\" @current={{current}} @deckMeta={{deckMeta}}>
          <p>Cool slide, bro.</p>
        </content-slide>
      </div>
    "}}</code-snippet>
  </content-slide>

  <content-slide @title="Implement the `current` property" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>{{inline-code "src/ui/components/slide-deck/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import Component, { tracked } from '@glimmer/component';
      import DeckMeta from '../../utils/deck-meta';

      export default class SlideDeck extends Component {
        @tracked current: number = 0;
        // ...
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="Before we finish implementing the `current` property..." @current={{current}} @deckMeta={{deckMeta}}>
    <p>We have two slide components now but they need to share functionality. Let's make a common superclass.</p>
  </content-slide>

  <content-slide @title="Review our slide classes" @current={{current}} @deckMeta={{deckMeta}}>
    <p>Here is our {{inline-code "<content-slide />"}} class. We can extract {{inline-code "args"}} while we're in here.</p>
    <h3>{{inline-code "src/ui/components/content-slide/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import Component, { tracked } from '@glimmer/component';
      import DeckMeta from '../../utils/deck-meta';

      export default class ContentSlide extends Component {
        args: {
          title: string,
          deckMeta: DeckMeta
        }

        get headerText() {
          let { title, author, twitter, github } = this.args.deckMeta;
          return `${title} / ${author} / twitter: ${twitter} / github: ${github}`;
        }
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="Review our slide classes" @current={{current}} @deckMeta={{deckMeta}}>
    <p>Here is our {{inline-code "<title-slide />"}} class. Not much in here at the moment.</p>
    <h3>{{inline-code "src/ui/components/title-slide/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import Component from '@glimmer/component';

      export default class TitleSlide extends Component {
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="Make our slide superclass" @current={{current}} @deckMeta={{deckMeta}}>
    <p>Let's move our args property in here and track it since it will change.</p>
    <h3>{{inline-code "src/ui/components/base-slide/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import Component, { tracked } from "@glimmer/component";
      import DeckMeta from '../../../utils/deck-meta';

      export default class BaseSlide extends Component {
        @tracked args: {
          title: string,
          deckMeta: DeckMeta
        };
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="Inherit our superclass in our other slides" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>{{inline-code "src/ui/components/title-slide/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import BaseSlide from '../base-slide/component';

      export default class TitleSlide extends BaseSlide {
      }
    </code-snippet>
    <h3>{{inline-code "src/ui/components/content-slide/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import BaseSlide from '../base-slide/component';

      export default class ContentSlide extends BaseSlide {
        get headerText() {
          let { title, author, twitter, github } = this.args.deckMeta;
          return `${title} / ${author} / twitter: ${twitter} / github: ${github}`;
        }
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="Now back to showing one slide at a time" @current={{current}} @deckMeta={{deckMeta}}>
    <p>Let's add {{inline-code "current"}} to the {{inline-code "args"}} type definition.</p>
    <h3>{{inline-code "src/ui/components/base-slide/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import Component, { tracked } from "@glimmer/component";
      import DeckMeta from '../../../utils/deck-meta';

      export default class BaseSlide extends Component {
        @tracked args: {
          current: number,
          title: string,
          deckMeta: DeckMeta
        };
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="Using our `current` arg" @current={{current}} @deckMeta={{deckMeta}}>
    <p>Remember, our {{inline-code "current"}} arg comes from the {{inline-code "<slide-deck />"}} component and gets passed into slide components.</p>
    <h3>{{inline-code "src/ui/components/slide-deck/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import Component, { tracked } from '@glimmer/component';
      import DeckMeta from '../../utils/deck-meta';

      export default class SlideDeck extends Component {
        @tracked current: number = 0;
        // ...
      }
    </code-snippet>
    <h3>{{inline-code "src/ui/components/slide-deck/template.hbs"}}</h3>
    <code-snippet class="language-handlebars">{{escape-markup "
      <div class=\"slide-deck\">
        <title-slide @current={{current}} @deckMeta={{deckMeta}} />
        <content-slide @title=\"First slide\" @current={{current}} @deckMeta={{deckMeta}}>
          <p>Cool slide, bro.</p>
        </content-slide>
      </div>
    "}}</code-snippet>
  </content-slide>

  <content-slide @title="Using our `current` arg" @current={{current}} @deckMeta={{deckMeta}}>
    <p>Now we need to figure out where each slide is in the deck and compare that to the current slide.</p>
    <h3>{{inline-code "src/ui/components/base-slide/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import Component, { tracked } from "@glimmer/component";

      export default class BaseSlide extends Component {
        // ...

        @tracked ordinal: number;

        @tracked('args', 'ordinal') get currentClass(): string {
          if (this.args.current === this.ordinal) return '';

          return 'hidden';
        }

        didInsertElement(): void {
          // set this.ordinal to this slide's position in the deck
        }
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="Using our `current` arg" @current={{current}} @deckMeta={{deckMeta}}>
    <p>Let's initialize our title slide with an ordinal of 0, since we know that in advance.</p>
    <h3>{{inline-code "src/ui/components/title-slide/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import BaseSlide from '../base-slide/component';

      export default class TitleSlide extends BaseSlide {
        ordinal = 0;
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="Using our `currentClass` property" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>{{inline-code "src/ui/components/content-slide/template.hbs"}}</h3>
    <code-snippet class="language-handlebars">{{escape-markup "
      <div class=\"slide content-slide {{currentClass}}\">
        <header><p>{{headerText}}</p></header>
        <article>
          <h1>{{@title}}</h1>
          {{yield}}
        </article>
      </div>
    "}}</code-snippet>
  </content-slide>

  <content-slide @title="Using our `currentClass` property" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>{{inline-code "src/ui/components/title-slide/template.hbs"}}</h3>
    <code-snippet class="language-handlebars">{{escape-markup "
      <div class=\"slide title-slide {{currentClass}}\">
        <h1>{{@deckMeta.title}}</h1>
        <h2>{{@deckMeta.author}}</h2>
        <h2>twitter: {{@deckMeta.twitter}}</h2>
        <h2>github: {{@deckMeta.github}}</h2>
      </div>
    "}}</code-snippet>
  </content-slide>

  <content-slide @title="Bask in your sweet, sweet success" @current={{current}} @deckMeta={{deckMeta}}>
    <p>At this point one slide should be showing and it should be the title slide.</p>
    <p><img src="https://i.ytimg.com/vi/er0jZv_0r-g/maxresdefault.jpg" width="70%" /></p>
  </content-slide>

  <content-slide @title="Bind keypresses to actions" @current={{current}} @deckMeta={{deckMeta}}>
    <h3>{{inline-code "src/ui/components/slide-deck/component.ts"}}</h3>
    <code-snippet class="language-typescript">
      import Component, { tracked } from '@glimmer/component';

      const BRACKET_LEFT = 91;
      const BRACKET_RIGHT = 93;

      export default class SlideDeck extends Component {
        @tracked current: number = 0;

        didInsertElement() {
          window.addEventListener('keypress', {
            handleEvent: this.keypressHandler = this.keypressHandler.bind(this)
          });
        }

        private keypressHandler(ev: KeyboardEvent): void {
          let which = ev.which;
          let actionMap = {
            [BRACKET_LEFT]: this.back,
            [BRACKET_RIGHT]: this.forward
          };

          actionMap[which].apply(this);
        }

        private back(): void {
          this.current--;
        }

        private forward(): void {
          this.current++;
        }
      }
    </code-snippet>
  </content-slide>

  <content-slide @title="Fin" @current={{current}} @deckMeta={{deckMeta}}>
    <p>Now we have an interactive slide deck.</p>
    <p>See the finished product at <a href="https://www.github.com/robbiepitts/glimmer-slide-deck">github.com/robbiepitts/glimmer-slide-deck</a>.</p>
    <p>To learn more about Glimmer visit <a href="https://glimmerjs.com/">glimmerjs.com</a>. You can also go to the Glimmer channel on the Ember Community Slack with specific questions.</p>
    <p>Thank you!</p>
  </content-slide>
</div>
